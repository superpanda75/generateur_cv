<?php
namespace generateur_cv\Model\Bean\Generated;

use Mouf\Database\TDBM\ResultIterator;
use Mouf\Database\TDBM\ResultArray;
use Mouf\Database\TDBM\AlterableResultIterator;
use generateur_cv\Model\Bean\UserBean;
use Mouf\Database\TDBM\AbstractTDBMObject;

/*
 * This file has been automatically generated by TDBM.
 * DO NOT edit this file, as it might be overwritten.
 * If you need to perform changes, edit the UserBean class instead!
 */

/**
 * The UserBaseBean class maps the 'user' table in database.
 */
class UserBaseBean extends AbstractTDBMObject implements \JsonSerializable
{
    /**
     * The constructor takes all compulsory arguments.
     *

     */
    public function __construct()
    {
        parent::__construct();

    }
        /**
     * The getter for the "id" column.
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->get('id', 'user');
    }

    /**
     * The setter for the "id" column.
     *
     * @param int $id
     */
    public function setId(int $id)
    {
        $this->set('id', $id, 'user');
    }

    /**
     * The getter for the "name" column.
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->get('name', 'user');
    }

    /**
     * The setter for the "name" column.
     *
     * @param string $name
     */
    public function setName(string $name = null)
    {
        $this->set('name', $name, 'user');
    }

    /**
     * The getter for the "firstname" column.
     *
     * @return string|null
     */
    public function getFirstname()
    {
        return $this->get('firstname', 'user');
    }

    /**
     * The setter for the "firstname" column.
     *
     * @param string $firstname
     */
    public function setFirstname(string $firstname = null)
    {
        $this->set('firstname', $firstname, 'user');
    }

    /**
     * The getter for the "age" column.
     *
     * @return int|null
     */
    public function getAge()
    {
        return $this->get('age', 'user');
    }

    /**
     * The setter for the "age" column.
     *
     * @param int $age
     */
    public function setAge(int $age = null)
    {
        $this->set('age', $age, 'user');
    }

    /**
     * The getter for the "phone" column.
     *
     * @return int|null
     */
    public function getPhone()
    {
        return $this->get('phone', 'user');
    }

    /**
     * The setter for the "phone" column.
     *
     * @param int $phone
     */
    public function setPhone(int $phone = null)
    {
        $this->set('phone', $phone, 'user');
    }

    /**
     * The getter for the "email" column.
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->get('email', 'user');
    }

    /**
     * The setter for the "email" column.
     *
     * @param string $email
     */
    public function setEmail(string $email = null)
    {
        $this->set('email', $email, 'user');
    }

    /**
     * The getter for the "password" column.
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->get('password', 'user');
    }

    /**
     * The setter for the "password" column.
     *
     * @param string $password
     */
    public function setPassword(string $password = null)
    {
        $this->set('password', $password, 'user');
    }

    /**
     * The getter for the "adress_number" column.
     *
     * @return int|null
     */
    public function getAdressNumber()
    {
        return $this->get('adress_number', 'user');
    }

    /**
     * The setter for the "adress_number" column.
     *
     * @param int $adress_number
     */
    public function setAdressNumber(int $adress_number = null)
    {
        $this->set('adress_number', $adress_number, 'user');
    }

    /**
     * The getter for the "adress" column.
     *
     * @return string|null
     */
    public function getAdress()
    {
        return $this->get('adress', 'user');
    }

    /**
     * The setter for the "adress" column.
     *
     * @param string $adress
     */
    public function setAdress(string $adress = null)
    {
        $this->set('adress', $adress, 'user');
    }

    /**
     * The getter for the "city" column.
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->get('city', 'user');
    }

    /**
     * The setter for the "city" column.
     *
     * @param string $city
     */
    public function setCity(string $city = null)
    {
        $this->set('city', $city, 'user');
    }

    /**
     * The getter for the "postcode" column.
     *
     * @return int|null
     */
    public function getPostcode()
    {
        return $this->get('postcode', 'user');
    }

    /**
     * The setter for the "postcode" column.
     *
     * @param int $postcode
     */
    public function setPostcode(int $postcode = null)
    {
        $this->set('postcode', $postcode, 'user');
    }

    /**
     * The getter for the "photo" column.
     *
     * @return string|null
     */
    public function getPhoto()
    {
        return $this->get('photo', 'user');
    }

    /**
     * The setter for the "photo" column.
     *
     * @param string $photo
     */
    public function setPhoto(string $photo = null)
    {
        $this->set('photo', $photo, 'user');
    }

    /**
     * Returns the list of FormationBean pointing to this bean via the user_id column.
     *
     * @return FormationBean[]|AlterableResultIterator
     */
    public function getFormation() : AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('formation', 'fk_formation_user', 'formation', ['formation.user_id' => $this->get('id', 'user')]);
    }

    /**
     * Returns the list of KnowledgeBean pointing to this bean via the user_id column.
     *
     * @return KnowledgeBean[]|AlterableResultIterator
     */
    public function getKnowledge() : AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('knowledge', 'fk_knowledge_user', 'knowledge', ['knowledge.user_id' => $this->get('id', 'user')]);
    }

    /**
     * Returns the list of SkillBean pointing to this bean via the user_id column.
     *
     * @return SkillBean[]|AlterableResultIterator
     */
    public function getSkill() : AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('skill', 'fk_skill_user', 'skill', ['skill.user_id' => $this->get('id', 'user')]);
    }


    /**
     * Serializes the object for JSON encoding.
     *
     * @param bool $stopRecursion Parameter used internally by TDBM to stop embedded objects from embedding other objects.
     * @return array
     */
    public function jsonSerialize($stopRecursion = false)
    {
        $array = [];
        $array['id'] = $this->getId();
        $array['name'] = $this->getName();
        $array['firstname'] = $this->getFirstname();
        $array['age'] = $this->getAge();
        $array['phone'] = $this->getPhone();
        $array['email'] = $this->getEmail();
        $array['password'] = $this->getPassword();
        $array['adressNumber'] = $this->getAdressNumber();
        $array['adress'] = $this->getAdress();
        $array['city'] = $this->getCity();
        $array['postcode'] = $this->getPostcode();
        $array['photo'] = $this->getPhoto();


        return $array;
    }

    /**
     * Returns an array of used tables by this bean (from parent to child relationship).
     *
     * @return string[]
     */
    protected function getUsedTables()
    {
        return [ 'user' ];
    }
}
